{% extends 'base.html.twig' %}

{% block title %}Objectifs{% endblock %}

{% block body %}
<h1>Liste des objectifs</h1>

<a href="{{ path('goal_new') }}" class="custom-btn">Créer un objectif</a>

<br><br>

{% if goals is defined and goals is not empty %}
<p>Cliquer sur l'icône du statut pour modifier celui-ci</p>
{% endif %}
<br><br>
<table>
    <thead>
        <tr>
            <th><span class="accent-title">Description</span></th>
            <th><span class="accent-title">Statut</span></th>
            <th><span class="accent-title">Action</span></th>
        </tr>
    </thead>
    <tbody>
        {% for goal in goals %}
        <tr>
            <td><span class="span-txt">{{ goal.description }}</span></td>
            <td>
                <form action="{{ path('goal_set_achieved', { 'id': goal.id }) }}" method="POST"
                    class="goal-form" data-goal-id="{{ goal.id }}" data-achieved="{{ goal.isAchieved ? 'true' : 'false' }}">
                    <button type="submit" class="goal-icon" style="background: none; border: none; padding: 0;">
                        {% if goal.isAchieved %}
                        <span class="material-icons pointer-icon" style="color: green; font-size: 24px;">check_circle</span>
                        {% else %}
                        <span class="material-icons pointer-icon" style="color: red; font-size: 24px;">cancel</span>
                        {% endif %}
                    </button>
                </form>
            </td>
            <td>
                <a href="{{ path('goal_show', {'id':goal.id}) }}" class="custom-btn">Voir</a>
            </td>
        </tr>
        {% else %}
        <tr>
            <td colspan="5">Aucun objectif trouvé.</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

{# Ajout du script confetti.js #}
<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.3.1"></script>
<script>
    document.querySelectorAll(".goal-form").forEach(form => {
        form.addEventListener("submit", function(event) {
            event.preventDefault(); // Empêche l'envoi du formulaire immédiatement
            
            let formData = new FormData(this);
            let actionUrl = this.getAttribute("action");

            // Vérifier si l'objectif était NON atteint avant le clic
            let wasNotAchieved = this.getAttribute("data-achieved") === "false";

            fetch(actionUrl, {
                method: "POST",
                body: formData
            }).then(response => {
                if (response.ok) {
                    if (wasNotAchieved) {
                        confetti({
                            particleCount: 100,
                            spread: 170,
                            origin: { y: 0.6 }
                        });
                    }

                    // Simuler un rechargement pour mettre à jour l'affichage
                    setTimeout(() => {
                        location.reload();
                    }, 500);
                }
            }).catch(error => console.error("Erreur :", error));
        });
    });
</script>
{% endblock %}
